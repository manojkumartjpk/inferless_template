import json
import numpy as np
import torch
from transformers import pipeline
import os


class InferlessPythonModel:

    # replace ##task_type## and ##huggingface_name## with appropriate values
    def initialize(self):
        self.generator = pipeline("text-generation", model="EleutherAI/gpt-neo-125M",device=0)

    def download_weights(self):
        try:
            print("download weights called", flush=True)
            folder_path = os.environ.get('MODEL_WEIGHTS_DIR')
            file_path = os.path.join(folder_path, 'example.txt')
            with open(file_path, 'w') as file:
                file.write('sample weights')
            file.close()
        except Exception as err:
            print("download weights exception",str(err), flush=True)
        
    # inputs is a dictonary where the keys are input names and values are actual input data
    # e.g. in the below code the input name is prompt 
    # The output generated by the infer function should be a dictonary where keys are output names and values are actual output data
    # e.g. in the below code the output name is generated_txt
    def infer(self, inputs):
        prompt = inputs["prompt"]
        pipeline_output = self.generator(prompt, do_sample=True, min_length=20)
        generated_txt = pipeline_output[0]["generated_text"]
        return {"generated_text": "sample output-develop-11"}

    # perform any cleanup activity here
    def finalize(self,args):
        self.pipe = None



